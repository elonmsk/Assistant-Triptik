import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// G√©n√©rateur d'ID stable pour √©viter les probl√®mes d'hydratation
let idCounter = 0
export function generateStableId(prefix: string = "id"): string {
  // Utiliser un compteur au lieu de Date.now() pour des IDs pr√©visibles
  // En production, on pourrait utiliser une librairie comme uuid
  if (typeof window !== 'undefined') {
    // C√¥t√© client, on peut utiliser un timestamp initial + compteur
    if (!window.__stableIdBase) {
      window.__stableIdBase = Date.now()
    }
    return `${prefix}-${window.__stableIdBase}-${++idCounter}`
  } else {
    // C√¥t√© serveur, utiliser seulement le compteur
    return `${prefix}-server-${++idCounter}`
  }
}

// Extension du window pour TypeScript
declare global {
  interface Window {
    __stableIdBase?: number
  }
}

// Fonctions pour la gestion des qualifications
export interface QualificationData {
  category: string
  answers: string[]
  timestamp: number
  userType?: 'accompagne' | 'accompagnant'
}

export function getQualificationData(category: string, userType: 'accompagne' | 'accompagnant' = 'accompagne'): QualificationData | null {
  // V√©rifier que nous sommes c√¥t√© client
  if (typeof window === 'undefined') {
    return null
  }
  
  try {
    const key = userType === 'accompagnant' ? `qualification_${category}_accompagnant` : `qualification_${category}`
    const data = localStorage.getItem(key)
    if (data) {
      const parsed = JSON.parse(data) as QualificationData
      // V√©rifier si les donn√©es ne sont pas trop anciennes (7 jours)
      if (Date.now() - parsed.timestamp < 7 * 24 * 60 * 60 * 1000) {
        return parsed
      }
    }
    return null
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des donn√©es de qualification:', error)
    return null
  }
}

export function formatQualificationForPrompt(qualificationData: QualificationData, category: string): string {
  if (!qualificationData || !qualificationData.answers.length) {
    return ''
  }

  const answers = qualificationData.answers
  const userType = qualificationData.userType || 'accompagne'
  
  let profile = `\n\nüìã PROFIL DE L'UTILISATEUR (${userType === 'accompagne' ? 'Personne accompagn√©e' : 'Accompagnant'} - ${category}):\n`
  
  // Questions communes
  const commonQuestions = [
    "D√©marches ant√©rieures",
    "Documents poss√©d√©s", 
    "Genre",
    "√Çge",
    "Niveau de fran√ßais",
    "Langue courante",
    "Ville de domiciliation",
    "D√©partement de domiciliation",
    "Situation de handicap",
    "Enfants"
  ]

  // Questions sp√©cifiques par cat√©gorie
  const specificQuestions: { [key: string]: string[] } = {
    'Sant√©': ['Couverture sociale'],
    'Emploi': ['R√©sidence en France', 'Niveau scolaire', 'Inscription France Travail', 'Exp√©rience professionnelle', 'CV √† jour'],
    'Logement': ['Nombre de personnes', 'Composition du foyer', 'Logement actuel', 'Demande logement social', 'Connaissance des aides'],
    'Droits': ['R√©sidence en France', 'Nationalit√©'],
    '√âducation': ['Niveau scolaire', 'Carte INE', 'Nationalit√©'],
    'Apprentissage Fran√ßais': ['Financement formation'],
    'Formation Pro': ['Financement', 'Dates demand√©es', 'Dur√©e engagement', 'Disponibilit√©', 'Jours pr√©sence'],
    'D√©marches': ['Nationalit√©']
  }

  const allQuestions = [...commonQuestions, ...(specificQuestions[category] || [])]
  
  answers.forEach((answer, index) => {
    if (index < allQuestions.length) {
      profile += `‚Ä¢ ${allQuestions[index]}: ${answer}\n`
    }
  })

  return profile
}

export function getAllQualificationData(userType: 'accompagne' | 'accompagnant' = 'accompagne'): QualificationData[] {
  // V√©rifier que nous sommes c√¥t√© client
  if (typeof window === 'undefined') {
    return []
  }
  
  const qualifications: QualificationData[] = []
  
  try {
    // Parcourir toutes les cl√©s de localStorage
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key && key.startsWith('qualification_')) {
        const data = localStorage.getItem(key)
        if (data) {
          const parsed = JSON.parse(data) as QualificationData
          // V√©rifier si c'est pour le bon type d'utilisateur et si les donn√©es ne sont pas trop anciennes
          if (parsed.userType === userType || (!parsed.userType && userType === 'accompagne')) {
            if (Date.now() - parsed.timestamp < 7 * 24 * 60 * 60 * 1000) {
              qualifications.push(parsed)
            }
          }
        }
      }
    }
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de toutes les qualifications:', error)
  }
  
  return qualifications
}
